name: Sync Question Bank
on:
  pull_request:
    branches:
      - master
  schedule:
    - cron: "0 * * * *" # Every hour
  workflow_dispatch: {}

permissions:
  contents: read
  packages: read

jobs:
  sync_leetcode:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lowercase owner
        id: lc
        run: echo "value=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ steps.lc.outputs.value }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create shared network
        run: docker network create peerprep_net || true

      - name: Pull images (ensure latest tag exists)
        run: |
          docker pull ghcr.io/${{ steps.lc.outputs.value }}/peerprep-leetcode-backend:latest
          docker pull ghcr.io/${{ steps.lc.outputs.value }}/peerprep-question-backend:latest

      # ---------- LEETCODE BACKEND ----------
      - name: Run LeetCode Backend (exposed for triggering)
        run: |
          docker run -d --name leetcode-backend --network peerprep_net \
            -p 5285:5285 \
            -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
            -e ADMIN_TOKEN="${{ secrets.ADMIN_TOKEN }}" \
            --health-cmd="wget -qO- http://localhost:5285/api/v1/leetcode/health >/dev/null 2>&1 || exit 1" \
            --health-interval=5s --health-timeout=3s --health-retries=24 \
            ghcr.io/${{ steps.lc.outputs.value }}/peerprep-leetcode-backend:latest

      # - name: Wait for LeetCode to be healthy (or fail fast)
      #   run: |
      #     set -euo pipefail
      #     for i in {1..60}; do
      #       state=$(docker inspect leetcode-backend --format '{{.State.Status}}')
      #       health=$(docker inspect leetcode-backend --format '{{if .State.Health}}{{.State.Health.Status}}{{end}}')
      #       echo "leetcode-backend State=$state Health=$health"

      #       # Show last healthcheck output when it's not healthy yet
      #       docker inspect leetcode-backend \
      #         --format='{{range .State.Health.Log}}{{printf "%s - %s\n" .End .Output}}{{end}}' | tail -n 3 || true

      #       if [ "$state" = "exited" ] || [ "$state" = "dead" ]; then
      #         echo "::error::leetcode-backend exited early"
      #         docker logs leetcode-backend || true
      #         exit 1
      #       fi
      #       [ "$health" = "healthy" ] && break
      #       sleep 2
      #     done
      #     [ "$(docker inspect leetcode-backend --format '{{.State.Health.Status}}')" = "healthy" ]

      # ---------- QUESTION BACKEND ----------
      - name: Run Question Backend (internal only)
        run: |
          docker run -d --name question-backend --network peerprep_net \
            -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
            -e ADMIN_TOKEN="${{ secrets.ADMIN_TOKEN }}" \
            --health-cmd="wget -qO- http://localhost:5275/api/v1/questions/health >/dev/null 2>&1 || exit 1" \
            --health-interval=5s --health-timeout=3s --health-retries=24 \
            ghcr.io/${{ steps.lc.outputs.value }}/peerprep-question-backend:latest

      - name: Wait for Question to be healthy (or fail fast)
        run: |
          set -euo pipefail
          for i in {1..60}; do
            state=$(docker inspect question-backend --format '{{.State.Status}}')
            health=$(docker inspect question-backend --format '{{if .State.Health}}{{.State.Health.Status}}{{end}}')
            echo "question-backend State=$state Health=$health"

            # Show last healthcheck output when it's not healthy yet
            docker inspect question-backend \
              --format='{{range .State.Health.Log}}{{printf "%s - %s\n" .End .Output}}{{end}}' | tail -n 3 || true

            if [ "$state" = "exited" ] || [ "$state" = "dead" ]; then
              echo "::error::question-backend exited early"
              docker logs question-backend || true
              exit 1
            fi
            [ "$health" = "healthy" ] && break
            sleep 2
          done
          [ "$(docker inspect question-backend --format '{{.State.Health.Status}}')" = "healthy" ]

      - name: Trigger seed-batch
        run: |
          code=$(curl -o /dev/null -s -w "%{http_code}" \
            -X POST -H "X-Admin-Token: ${{ secrets.ADMIN_TOKEN }}" \
            http://localhost:5285/api/v1/leetcode/seed-batch)
          test "$code" -eq 200 || { echo "seed-batch failed: $code"; exit 1; }

      - name: Dump logs on failure
        if: failure()
        run: |
          echo "===== question-backend logs ====="
          docker logs question-backend || true
          echo "===== leetcode-backend logs ====="
          docker logs leetcode-backend || true

      - name: Cleanup
        if: always()
        run: |
          docker stop leetcode-backend question-backend || true
          docker network rm peerprep_net || true
